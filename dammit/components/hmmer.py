# Copyright (C) 2015-2018 Camille Scott
# All rights reserved.
#
# This software may be modified and distributed under the terms
# of the BSD license.  See the LICENSE file for details.

import os

import click
import pandas as pd

from ..fileio.hmmer import HMMerParser
from ..fileio.gff3 import GFF3Parser 
from ..cli import component


def split_transdecoder_names(hmmer_df):
    hmmer_df.rename(columns={'query_name': 'full_query_name'},
                    inplace=True)

    name_df = hmmer_df.full_query_name.str.split('::', expand=True)
    name_df.rename(columns={0: 'td_transcript_name',
                            1: 'query_name',
                            2: 'td_g',
                            3: 'td_m'},
                   inplace=True)
    hmmer_df = pd.concat((hmmer_df, name_df), axis=1)
    
    return hmmer_df


@component.command()
@click.argument('hmmer_filename')
@click.argument('gff_filename')
@click.argument('output_filename')
def remap_hmmer_coords(hmmer_filename, gff_filename, output_filename):
    '''Given an hmmscan result from the ORFs generated by
    `TransDecoder.LongOrfs` and TransDecoder's GFF3, remap the HMMER results
    so that they refer to the original nucleotide coordinates rather than the
    translated ORF coordinates. Produces a CSV file with columns matching
    those in HMMerParser.
    \f

    Args:
        hmmer_filename (str): Path to the `hmmscan` results.
        remap_gff_filename (str): The GFF3 produced by `TransDecoder.LongOrfs`.
        output_filename (str): Path to store remapped results.
    '''

    name = 'remap_hmmer:{0}'.format(os.path.basename(hmmer_filename))

    def cmd():
        gff_df = GFF3Parser(gff_filename).read()
        hmmer_df = HMMerParser(hmmer_filename).read()
        hmmer_df = split_transdecoder_names(hmmer_df)

        if len(gff_df) > 0 and len(hmmer_df) > 0:
            merged_df = pd.merge(hmmer_df, gff_df, left_on='full_query_name', right_on='ID')

            hmmer_df['env_coord_from'] = (merged_df.start + \
                                          (3 * merged_df.env_coord_from)).astype(int)
            hmmer_df['env_coord_to'] = (merged_df.start + \
                                        (3 * merged_df.env_coord_to)).astype(int)
            hmmer_df['ali_coord_from'] = (merged_df.start + \
                                          (3 * merged_df.ali_coord_from)).astype(int)
            hmmer_df['ali_coord_to'] = (merged_df.start + \
                                        (3 * merged_df.ali_coord_to)).astype(int)
        
        hmmer_df.to_csv(output_filename, header=True, index=False)
